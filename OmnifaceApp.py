import streamlit as st

# Intentar importar numpy con manejo de errores espec√≠ficos
try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError as e:
    st.error(f"Error importando numpy: {e}")
    st.error("Numpy es requerido para el reconocimiento facial")
    NUMPY_AVAILABLE = False

import pandas as pd
from PIL import Image
import os
import pickle
import io
from database_manager import get_db_manager

# Intentar importar DeepFace (versi√≥n ligera)
try:
    from deepface import DeepFace
    DEEPFACE_AVAILABLE = True
    st.success("üéØ DeepFace activado - Reconocimiento facial avanzado (versi√≥n ligera)")
except ImportError as e:
    st.warning(f"‚ö†Ô∏è DeepFace no disponible: {e}")
    st.info("üîÑ Funcionando en modo simulado")
    DEEPFACE_AVAILABLE = False

# Verificar que numpy est√© disponible (requerido)
if not NUMPY_AVAILABLE:
    st.error("‚ùå Numpy es requerido para la aplicaci√≥n")
    st.stop()

# Si DeepFace no est√° disponible, usar simulaci√≥n
if not DEEPFACE_AVAILABLE:
    st.warning("üéØ Modo simulado activado - DeepFace no disponible")
    # Crear clase dummy para DeepFace
    class DeepFaceDummy:
        @staticmethod
        def represent(img_path, model_name='Facenet512', enforce_detection=True, **kwargs):
            # Simular embedding de 512 dimensiones para Facenet512
            return [{"embedding": np.random.rand(512).tolist()}]
        
        @staticmethod
        def verify(img1_path, img2_path, model_name='Facenet512', enforce_detection=True, **kwargs):
            # Simular verificaci√≥n
            distance = np.random.uniform(0.2, 0.8)
            return {"verified": distance < 0.5, "distance": distance}
    
    DeepFace = DeepFaceDummy()
else:
    st.success("üéØ Reconocimiento facial con DeepFace activado")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="OmniFace - Reconocimiento Facial",
    page_icon="üëÅÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üéØ OmniFace - Sistema de Reconocimiento Facial")
st.markdown("---")

# Obtener instancia del manager de base de datos
@st.cache_resource
def get_database_manager():
    return get_db_manager()

db_manager = get_database_manager()

# Funci√≥n para cargar las codificaciones de rostros
def load_encodings():
    encodings = db_manager.get_all_encodings()
    
    # Verificar y limpiar encodings incompatibles
    valid_encodings = {}
    invalid_count = 0
    
    for person_id, encoding in encodings.items():
        if isinstance(encoding, np.ndarray) and encoding.shape == (128,):
            valid_encodings[person_id] = encoding
        else:
            invalid_count += 1
    
    # Solo mostrar warning una vez si hay encodings incompatibles
    if invalid_count > 0 and not st.session_state.get('incompatible_warning_shown', False):
        st.warning(f"‚ö†Ô∏è {invalid_count} encodings necesitan regeneraci√≥n. Ve a Estad√≠sticas ‚Üí Herramientas de Administraci√≥n ‚Üí Regenerar Todos.")
        st.session_state.incompatible_warning_shown = True
    
    return valid_encodings

# Funci√≥n para cargar la base de datos de personas
def load_database():
    return db_manager.get_all_persons()

# Funci√≥n para regenerar encoding de una persona
def regenerate_person_encoding(person_id):
    """Regenerar el encoding de una persona usando su imagen almacenada"""
    try:
        # Obtener imagen de la persona
        image = db_manager.get_person_image(person_id)
        if image is None:
            return False, "No se pudo cargar la imagen"
        
        # Generar nuevo encoding
        new_encoding = get_face_encoding(image)
        if new_encoding is None:
            return False, "No se pudo detectar rostro en la imagen"
        
        # Actualizar encoding en la base de datos
        success = db_manager.update_person_encoding(person_id, new_encoding)
        return success, "Encoding regenerado exitosamente" if success else "Error actualizando encoding"
    
    except Exception as e:
        return False, f"Error: {str(e)}"

# Funci√≥n para regenerar todos los encodings incompatibles
def regenerate_all_incompatible_encodings():
    """Regenerar autom√°ticamente todos los encodings incompatibles"""
    encodings = db_manager.get_all_encodings()
    invalid_persons = []
    
    for person_id, encoding in encodings.items():
        if not isinstance(encoding, np.ndarray) or encoding.shape != (128,):
            invalid_persons.append(person_id)
    
    regenerated_count = 0
    failed_count = 0
    
    for person_id in invalid_persons:
        success, message = regenerate_person_encoding(person_id)
        if success:
            regenerated_count += 1
        else:
            failed_count += 1
    
    return regenerated_count, failed_count, len(invalid_persons)

# Funci√≥n para limpiar encodings incompatibles
def clean_incompatible_encodings():
    """Eliminar todos los encodings incompatibles de la base de datos"""
    encodings = db_manager.get_all_encodings()
    invalid_persons = []
    
    for person_id, encoding in encodings.items():
        if not isinstance(encoding, np.ndarray) or encoding.shape != (128,):
            invalid_persons.append(person_id)
    
    removed_count = 0
    for person_id in invalid_persons:
        if db_manager.delete_person_encoding(person_id):
            removed_count += 1
    
    return removed_count, len(invalid_persons)

# Funci√≥n para guardar persona completa
def save_person_complete(person_id, name, image, encoding):
    return db_manager.save_person(person_id, name, image, encoding)

# Funci√≥n para procesar imagen y obtener codificaci√≥n facial
def get_face_encoding(image):
    """
    Procesar imagen y obtener codificaci√≥n facial usando DeepFace
    Versi√≥n optimizada y precavida para Streamlit Cloud
    """
    try:
        # Convertir imagen PIL a array numpy en formato RGB
        image_array = np.array(image)
        
        # Asegurar formato RGB
        if len(image_array.shape) == 3:
            if image_array.shape[2] == 4:  # RGBA
                image_array = image_array[:, :, :3]  # Convertir a RGB
            elif image_array.shape[2] == 3:  # Ya es RGB
                pass
        elif len(image_array.shape) == 2:  # Escala de grises
            image_array = np.stack([image_array] * 3, axis=-1)
        else:
            st.error("Formato de imagen no soportado")
            return None
        
        # Usar DeepFace para obtener embedding
        if DEEPFACE_AVAILABLE:
            try:
                # DeepFace con modelo Facenet512 (512 dimensiones)
                embedding_result = DeepFace.represent(
                    img_path=image_array,
                    model_name='Facenet512',
                    enforce_detection=True,
                    detector_backend='opencv'  # Usa OpenCV interno
                )
                
                if embedding_result and len(embedding_result) > 0:
                    encoding = np.array(embedding_result[0]["embedding"])
                    # DeepFace Facenet512 retorna 512 dimensiones
                    if encoding.shape == (512,):
                        return encoding
                    else:
                        st.warning(f"Encoding DeepFace tiene forma: {encoding.shape}")
                        return encoding  # Retornar de todos modos
                
                return None
                
            except Exception as deepface_error:
                st.warning(f"Error con DeepFace: {deepface_error}")
                # Fallback a simulaci√≥n
                return np.random.rand(512)  # Simulaci√≥n de 512 dimensiones
        else:
            # Modo simulado
            return np.random.rand(512)  # Simulaci√≥n consistente
        
    except Exception as e:
        st.error(f"Error procesando imagen: {e}")
        return None

# Funci√≥n para reconocer rostro
def recognize_face(image, known_encodings):
    """
    Reconocer rostro comparando con encodings conocidos
    Versi√≥n optimizada usando DeepFace para Streamlit Cloud
    """
    # Obtener encoding de la imagen capturada
    face_encoding = get_face_encoding(image)
    
    if face_encoding is None:
        return None, None
    
    # Verificar que tenemos encodings conocidos v√°lidos
    if not known_encodings:
        return None, None
    
    # Par√°metros de reconocimiento para DeepFace
    tolerance = 0.5  # Tolerancia para DeepFace (distancia coseno)
    
    best_match_person_id = None
    best_distance = float('inf')
    
    # Comparar con cada encoding conocido
    for person_id, known_encoding in known_encodings.items():
        try:
            # Asegurar que es numpy array
            if not isinstance(known_encoding, np.ndarray):
                continue
            
            # Verificar dimensiones compatibles (DeepFace usa 512 dimensiones)
            expected_shape = (512,) if DEEPFACE_AVAILABLE else (128,)
            if known_encoding.shape != expected_shape:
                # Intentar adaptar encodings antiguos de 128 a 512
                if known_encoding.shape == (128,) and DEEPFACE_AVAILABLE:
                    st.warning(f"‚ö†Ô∏è Encoding de {person_id} necesita regeneraci√≥n (128‚Üí512 dims)")
                    continue
                elif known_encoding.shape != expected_shape:
                    continue
            
            # Calcular distancia coseno para DeepFace
            if DEEPFACE_AVAILABLE:
                # Distancia euclidiana normalizada (m√°s apropiada para DeepFace)
                distance = np.linalg.norm(face_encoding - known_encoding)
            else:
                # Simulaci√≥n para modo dummy
                distance = np.random.uniform(0.2, 0.8)
            
            # Si est√° dentro de la tolerancia y es el mejor match hasta ahora
            if distance <= tolerance and distance < best_distance:
                best_distance = distance
                best_match_person_id = person_id
        
        except Exception as e:
            # Silenciosamente continuar con el siguiente encoding
            continue
    
    if best_match_person_id is not None:
        # Convertir distancia a porcentaje de confianza (ajustado para DeepFace)
        if DEEPFACE_AVAILABLE:
            confidence = max(0, (1 - best_distance / tolerance) * 100)
        else:
            confidence = max(0, (1 - best_distance) * 100)
        return best_match_person_id, confidence
    else:
        return None, None

# Funci√≥n para procesar m√∫ltiples im√°genes y crear encoding promediado
def get_averaged_face_encoding(images):
    """
    Procesar m√∫ltiples im√°genes y crear un encoding promediado m√°s robusto
    Esto mejora significativamente la precisi√≥n del reconocimiento
    """
    try:
        valid_encodings = []
        
        for i, image in enumerate(images):
            # Obtener encoding individual
            encoding = get_face_encoding(image)
            if encoding is not None:
                valid_encodings.append(encoding)
                st.success(f"‚úÖ Imagen {i+1}: Rostro detectado correctamente")
            else:
                st.warning(f"‚ö†Ô∏è Imagen {i+1}: No se detect√≥ rostro claro")
        
        if len(valid_encodings) == 0:
            st.error("‚ùå No se pudo detectar rostros v√°lidos en ninguna imagen")
            return None
        elif len(valid_encodings) == 1:
            st.info("‚ÑπÔ∏è Solo una imagen v√°lida disponible")
            return valid_encodings[0]
        else:
            # Promediar los encodings para mayor robustez
            averaged_encoding = np.mean(valid_encodings, axis=0)
            st.success(f"üéØ Encoding promediado creado desde {len(valid_encodings)} im√°genes v√°lidas")
            st.info("üí° El encoding promediado mejora significativamente la precisi√≥n del reconocimiento")
            return averaged_encoding
            
    except Exception as e:
        st.error(f"Error procesando m√∫ltiples im√°genes: {e}")
        return None

# Funci√≥n auxiliar para procesar m√∫ltiples im√°genes (registro avanzado)
def process_advanced_person(person_id, person_name, image_sources):
    """Procesar y agregar una nueva persona usando m√∫ltiples im√°genes"""
    # Validaciones
    if not person_id:
        st.error("‚ùå Por favor ingresa un ID para la persona")
        return False
    elif not person_name:
        st.error("‚ùå Por favor ingresa el nombre completo")
        return False
    elif not any(image_sources):
        st.error("‚ùå Por favor toma al menos una fotograf√≠a")
        return False
    elif db_manager.person_exists(person_id):
        st.error(f"‚ùå Ya existe una persona con ID '{person_id}'")
        return False
    else:
        try:
            # Filtrar im√°genes v√°lidas
            valid_images = []
            for i, img_source in enumerate(image_sources):
                if img_source is not None:
                    image = Image.open(img_source)
                    valid_images.append(image)
                    st.success(f"‚úÖ Imagen {i+1} cargada correctamente")
            
            if len(valid_images) == 0:
                st.error("‚ùå No se pudo cargar ninguna imagen v√°lida")
                return False
            
            st.info(f"üì∑ Procesando {len(valid_images)} imagen(es)...")
            
            # Usar la funci√≥n de encoding promediado
            averaged_encoding = get_averaged_face_encoding(valid_images)
            
            if averaged_encoding is not None:
                # Guardar persona con encoding promediado (usar la primera imagen como representativa)
                if save_person_complete(person_id, person_name, valid_images[0], averaged_encoding):
                    st.success("‚úÖ Datos guardados en la base de datos")
                    st.success("‚úÖ Encoding promediado creado y guardado")
                    st.success(f"üéâ Persona '{person_name}' agregada exitosamente con registro avanzado!")
                    
                    # Mostrar m√©tricas de calidad
                    st.info(f"üìä Se procesaron {len(valid_images)} im√°genes para m√°xima precisi√≥n")
                    
                    # Mostrar preview de las im√°genes
                    preview_cols = st.columns(len(valid_images))
                    for i, img in enumerate(valid_images):
                        with preview_cols[i]:
                            st.image(img, caption=f"Imagen {i+1}", width=150)
                    
                    st.info("üîÑ Recarga la p√°gina para ver los cambios en la galer√≠a")
                    return True
                else:
                    st.error("‚ùå Error guardando en la base de datos")
                    return False
            else:
                st.error("‚ùå No se pudo procesar las im√°genes para crear el encoding")
                st.info("üí° Consejos: Aseg√∫rate de que al menos una imagen contenga un rostro claro")
                return False
        
        except Exception as e:
            st.error(f"‚ùå Error procesando las im√°genes: {str(e)}")
            st.info("üîß Intenta con im√°genes diferentes o verifica que los archivos no est√©n corruptos")
            return False

# Sidebar para navegaci√≥n
with st.sidebar:
    st.header("üîß Panel de Control")
    page = st.radio(
        "Selecciona una opci√≥n:",
        ["üìù Gesti√≥n de Base de Datos", "üé• Reconocimiento Facial", "üìä Estad√≠sticas"]
    )

# P√°gina de Gesti√≥n de Base de Datos
if page == "üìù Gesti√≥n de Base de Datos":
    st.header("üìù Gesti√≥n de Base de Datos de Rostros")
    
    # Cargar datos frescos para esta p√°gina
    database = load_database()
    encodings = load_encodings()
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("‚ûï Agregar Nueva Persona")
        
        # Tabs para diferentes m√©todos de captura
        tab1, tab2, tab3 = st.tabs(["üìÅ Subir Archivo", "üì∑ Tomar Foto", "üéØ Registro Avanzado"])
        
        with tab1:
            st.write("**Opci√≥n 1: Subir una imagen desde tu dispositivo**")
            st.info("üí° **Consejos:** Usa im√°genes en formato JPG, JPEG o PNG con buena resoluci√≥n")
            with st.form("add_person_upload_form"):
                person_id_upload = st.text_input("ID de la Persona:", key="id_upload", 
                                                help="Ingresa un identificador √∫nico (ej: 12345678)")
                person_name_upload = st.text_input("Nombre Completo:", key="name_upload",
                                                  help="Nombre completo de la persona")
                uploaded_file = st.file_uploader(
                    "Subir Fotograf√≠a:", 
                    type=['jpg', 'jpeg', 'png'],
                    help="Sube una imagen clara del rostro de la persona"
                )
                
                submitted_upload = st.form_submit_button("üíæ Agregar Persona (Archivo)")
        
        with tab2:
            st.write("**Opci√≥n 2: Tomar foto directamente con la c√°mara**")
            st.info("üì∏ **Consejos:** Aseg√∫rate de tener buena iluminaci√≥n y que el rostro est√© centrado")
            with st.form("add_person_camera_form"):
                person_id_camera = st.text_input("ID de la Persona:", key="id_camera",
                                                help="Ingresa un identificador √∫nico (ej: 12345678)")
                person_name_camera = st.text_input("Nombre Completo:", key="name_camera",
                                                  help="Nombre completo de la persona")
                
                st.markdown("**üì∑ Captura de Imagen:**")
                camera_input = st.camera_input("Tomar fotograf√≠a:",
                                              help="Haz clic para activar la c√°mara y tomar una foto")
                
                submitted_camera = st.form_submit_button("üíæ Agregar Persona (Foto)")
        
        with tab3:
            st.write("**Opci√≥n 3: Registro Avanzado con 3 Im√°genes üéØ**")
            st.info("üöÄ **Mejora la precisi√≥n:** Toma 3 fotos diferentes para crear un encoding m√°s robusto")
            st.markdown("""
            **¬øPor qu√© usar 3 im√°genes?**
            - üìà **Mayor precisi√≥n:** Aumenta significativamente la confianza del reconocimiento
            - üé≠ **Diferentes condiciones:** Captura variaciones naturales del rostro
            - üí° **Robustez:** Menos sensible a cambios de iluminaci√≥n y expresiones
            - ‚úÖ **Recomendado** para usuarios que han tenido problemas de baja confianza
            """)
            
            with st.form("add_person_advanced_form"):
                person_id_advanced = st.text_input("ID de la Persona:", key="id_advanced",
                                                 help="Ingresa un identificador √∫nico (ej: 12345678)")
                person_name_advanced = st.text_input("Nombre Completo:", key="name_advanced",
                                                   help="Nombre completo de la persona")
                
                st.markdown("### üì∏ Captura de 3 Im√°genes")
                st.info("üí° **Consejos:** Toma cada foto con diferentes condiciones de luz o √°ngulos ligeramente distintos")
                
                # Contenedores para las 3 im√°genes
                col_img1, col_img2, col_img3 = st.columns(3)
                
                with col_img1:
                    st.markdown("**üì∑ Imagen 1:**")
                    camera_input_1 = st.camera_input("Foto 1 (ej: luz natural):", key="cam1")
                
                with col_img2:
                    st.markdown("**üì∑ Imagen 2:**")
                    camera_input_2 = st.camera_input("Foto 2 (ej: luz artificial):", key="cam2")
                
                with col_img3:
                    st.markdown("**üì∑ Imagen 3:**")
                    camera_input_3 = st.camera_input("Foto 3 (ej: expresi√≥n neutra):", key="cam3")
                
                # Mostrar preview de las im√°genes capturadas
                if camera_input_1 or camera_input_2 or camera_input_3:
                    st.markdown("### üñºÔ∏è Vista Previa de Im√°genes Capturadas")
                    preview_cols = st.columns(3)
                    
                    if camera_input_1:
                        with preview_cols[0]:
                            st.image(camera_input_1, caption="Imagen 1", width=150)
                    
                    if camera_input_2:
                        with preview_cols[1]:
                            st.image(camera_input_2, caption="Imagen 2", width=150)
                    
                    if camera_input_3:
                        with preview_cols[2]:
                            st.image(camera_input_3, caption="Imagen 3", width=150)
                
                submitted_advanced = st.form_submit_button("üéØ Agregar Persona (Registro Avanzado)")

        # Funci√≥n auxiliar para procesar persona
        def process_person(person_id, person_name, image_source, source_type):
            """Procesar y agregar una nueva persona a la base de datos"""
            # Validaciones
            if not person_id:
                st.error("‚ùå Por favor ingresa un ID para la persona")
                return False
            elif not person_name:
                st.error("‚ùå Por favor ingresa el nombre completo")
                return False
            elif image_source is None:
                if source_type == "upload":
                    st.error("‚ùå Por favor sube una fotograf√≠a")
                else:
                    st.error("‚ùå Por favor toma una fotograf√≠a")
                return False
            elif db_manager.person_exists(person_id):
                st.error(f"‚ùå Ya existe una persona con ID '{person_id}'")
                return False
            else:
                try:
                    # Procesar imagen
                    image = Image.open(image_source)
                    st.info("üì∑ Procesando imagen...")
                    
                    # Obtener codificaci√≥n facial
                    face_encoding = get_face_encoding(image)
                    
                    if face_encoding is not None:
                        # Guardar persona completa en Supabase
                        if save_person_complete(person_id, person_name, image, face_encoding):
                            st.success("‚úÖ Datos guardados en la base de datos")
                            st.success("‚úÖ Codificaci√≥n facial guardada")
                            st.success(f"üéâ Persona '{person_name}' agregada exitosamente!")
                            
                            # Mostrar preview de la imagen
                            st.image(image, caption=f"Imagen registrada: {person_name}", width=200)
                            
                            st.info("üîÑ Recarga la p√°gina para ver los cambios en la galer√≠a")
                            return True
                        else:
                            st.error("‚ùå Error guardando en la base de datos")
                            return False
                    else:
                        st.error("‚ùå No se pudo detectar un rostro en la imagen. Intenta con otra foto m√°s clara.")
                        st.info("üí° Consejos: Aseg√∫rate de que el rostro est√© bien iluminado, centrado y sin obstrucciones")
                        return False
                
                except Exception as e:
                    st.error(f"‚ùå Error procesando la solicitud: {str(e)}")
                    st.info("üîß Intenta con una imagen diferente o verifica que el archivo no est√© corrupto")
                    return False
        
        # Procesar formulario de archivo subido
        if submitted_upload:
            process_person(person_id_upload, person_name_upload, uploaded_file, "upload")
        
        # Procesar formulario de c√°mara
        if submitted_camera:
            process_person(person_id_camera, person_name_camera, camera_input, "camera")
        
        # Procesar formulario de registro avanzado
        if submitted_advanced:
            # Validar que se capturaron al menos 2 im√°genes
            images_captured = [camera_input_1, camera_input_2, camera_input_3]
            valid_images_count = sum(1 for img in images_captured if img is not None)
            
            if valid_images_count < 2:
                st.error("‚ùå Debes capturar al menos 2 im√°genes para el registro avanzado")
                st.info("üí° El registro avanzado requiere m√≠nimo 2 im√°genes para crear un encoding robusto")
            else:
                # Procesar con las im√°genes v√°lidas
                process_advanced_person(person_id_advanced, person_name_advanced, images_captured)
        
        # Secci√≥n de ayuda y preview
        st.markdown("---")
        st.subheader("üìã Instrucciones Generales")
        
        with st.expander("üîç Consejos para mejores resultados", expanded=False):
            st.markdown("""
            ### Para obtener el mejor reconocimiento facial:
            
            **üñºÔ∏è Calidad de imagen:**
            - Usa im√°genes con buena resoluci√≥n (m√≠nimo 200x200 p√≠xeles)
            - Evita im√°genes borrosas o pixeladas
            - Formatos soportados: JPG, JPEG, PNG
            
            **üí° Iluminaci√≥n:**
            - Aseg√∫rate de tener buena iluminaci√≥n frontal
            - Evita sombras fuertes en el rostro
            - La luz natural es ideal
            
            **üë§ Posici√≥n del rostro:**
            - El rostro debe estar centrado en la imagen
            - Evita √°ngulos extremos o perfiles
            - Aseg√∫rate de que el rostro est√© completamente visible
            
            **üö´ Evita:**
            - Gafas de sol o m√°scaras
            - Gorros que cubran gran parte del rostro
            - Expresiones faciales extremas
            - M√∫ltiples personas en la misma imagen
            """)
        
        # Preview de imagen capturada
        if 'uploaded_file' in locals() and uploaded_file is not None:
            st.markdown("### üñºÔ∏è Preview de Imagen Subida")
            st.image(uploaded_file, caption="Imagen seleccionada", width=300)
        
        if 'camera_input' in locals() and camera_input is not None:
            st.markdown("### üì∏ Preview de Foto Capturada")
            st.image(camera_input, caption="Foto tomada con c√°mara", width=300)
    
    with col2:
        st.subheader("üë• Base de Datos Actual")
        
        if not database.empty:
            st.dataframe(database[['id', 'nombre']])
            
            # Mostrar im√°genes
            st.subheader("üñºÔ∏è Galer√≠a de Rostros")
            cols = st.columns(3)
            
            for idx, row in database.iterrows():
                with cols[idx % 3]:
                    # Obtener imagen desde Supabase
                    image = db_manager.get_person_image(row['id'])
                    if image:
                        st.image(image, caption=f"{row['nombre']} (ID: {row['id']})", width=300)
                    else:
                        st.error("‚ùå Error cargando imagen")
                    
                    # Bot√≥n para eliminar
                    if st.button(f"üóëÔ∏è Eliminar {row['nombre']}", key=f"delete_{idx}"):
                        # Eliminar de Supabase
                        if db_manager.delete_person(row['id']):
                            st.success(f"‚úÖ Persona '{row['nombre']}' eliminada exitosamente!")
                            st.rerun()
                        else:
                            st.error("‚ùå Error eliminando persona")
        else:
            st.info("üìù No hay personas registradas en la base de datos.")

# P√°gina de Reconocimiento Facial
elif page == "üé• Reconocimiento Facial":
    st.header("üé• Reconocimiento Facial en Tiempo Real")
    
    # Cargar datos frescos para esta p√°gina
    database = load_database()
    encodings = load_encodings()
    
    if database.empty:
        st.warning("‚ö†Ô∏è No hay personas registradas en la base de datos. Ve a la secci√≥n de Gesti√≥n para agregar personas.")
    else:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üì∑ Capturar Imagen")
            
            # Captura de imagen con c√°mara
            camera_input = st.camera_input("Toma una foto para reconocimiento facial:")
            
            if camera_input is not None:
                # Procesar imagen capturada
                image = Image.open(camera_input)
                st.image(image, caption="Imagen capturada")
                
                # Realizar reconocimiento
                with st.spinner("üîç Analizando rostro..."):
                    person_id, confidence = recognize_face(image, encodings)
                
                if person_id is not None:
                    # Buscar informaci√≥n de la persona
                    person_info = database[database['id'] == person_id].iloc[0]
                    
                    with col2:
                        st.subheader("‚úÖ Persona Reconocida")
                        st.success(f"**Nombre:** {person_info['nombre']}")
                        st.info(f"**ID:** {person_info['id']}")
                        st.info(f"**Confianza:** {confidence:.2f}%")
                        
                        # Mostrar imagen de referencia desde Supabase
                        ref_image = db_manager.get_person_image(person_info['id'])
                        if ref_image:
                            st.image(ref_image, caption="Imagen de referencia")
                        else:
                            st.warning("‚ö†Ô∏è No se pudo cargar la imagen de referencia")
                        
                        # Mostrar alerta de √©xito basada en confianza
                        if confidence >= 95:
                            st.balloons()
                            st.success("üéØ ¬°Reconocimiento con confianza muy alta!")
                        elif confidence >= 90:
                            st.success("‚úÖ Reconocimiento con confianza alta")
                        elif confidence >= 85:
                            st.info("üëç Reconocimiento con confianza aceptable")
                        else:
                            st.warning("‚ö†Ô∏è Reconocimiento con confianza baja")
                else:
                    with col2:
                        st.subheader("‚ùå No Reconocido")
                        st.error("No se pudo identificar a la persona en la imagen.")
                        st.info("Verifica que la persona est√© registrada en la base de datos.")
        
        with col2:
            if camera_input is None:
                st.subheader("üìã Instrucciones")
                st.markdown("""
                ### C√≥mo usar el reconocimiento facial:
                
                1. **Captura una imagen** usando la c√°mara
                2. **Aseg√∫rate** de que el rostro est√© bien iluminado
                3. **Mant√©n** el rostro centrado en la imagen
                4. **Espera** a que se procese el reconocimiento
                5. **Revisa** los resultados y la confianza
                
                ### Consejos para mejor reconocimiento:
                - Usa buena iluminaci√≥n
                - Mant√©n el rostro sin obstrucciones
                - Evita sombras fuertes
                - Aseg√∫rate de que el rostro est√© enfocado
                """)

# P√°gina de Estad√≠sticas
elif page == "üìä Estad√≠sticas":
    st.header("üìä Estad√≠sticas del Sistema")
    
    # Cargar datos frescos para esta p√°gina
    database = load_database()
    encodings = load_encodings()
    stats = db_manager.get_statistics()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üë• Personas Registradas", stats['total_persons'])
    
    with col2:
        st.metric("üîß Codificaciones Activas", stats['encodings_active'])
    
    with col3:
        st.metric("üíæ Tama√±o Total (MB)", stats['total_size_mb'])
    
    # Tabla de resumen
    if not database.empty:
        st.subheader("üìã Resumen de Base de Datos")
        st.dataframe(database)
    
    # Informaci√≥n del sistema
    st.subheader("‚ÑπÔ∏è Informaci√≥n del Sistema")
    st.info("""
    **Sistema de Reconocimiento Facial OmniFace v2.0**
    
    - **Tecnolog√≠a:** face_recognition + Supabase
    - **Base de datos:** Supabase (PostgreSQL)
    - **Almacenamiento:** Cloud (persistente)
    - **Tolerancia:** 0.25 (alta precisi√≥n)
    - **Confianza m√≠nima:** 90%
    - **Formatos soportados:** JPG, JPEG, PNG
    - **Deploy:** Compatible con Streamlit Cloud
    """)
    
    # Secci√≥n de administraci√≥n
    st.subheader("üîß Herramientas de Administraci√≥n")
    
    col_admin1, col_admin2 = st.columns(2)
    
    with col_admin1:
        st.write("**üîÑ Regenerar Encodings Autom√°ticamente**")
        st.info("Regenera autom√°ticamente todos los encodings incompatibles usando las im√°genes almacenadas")
        if st.button("üîÑ Regenerar Todos", type="primary"):
            with st.spinner("Regenerando encodings incompatibles..."):
                regenerated, failed, total = regenerate_all_incompatible_encodings()
                if regenerated > 0:
                    st.success(f"‚úÖ Se regeneraron {regenerated} encodings exitosamente")
                    if failed > 0:
                        st.warning(f"‚ö†Ô∏è {failed} encodings no pudieron regenerarse")
                    st.info("üîÑ Recargando p√°gina...")
                    st.rerun()
                else:
                    if total == 0:
                        st.info("‚ÑπÔ∏è No se encontraron encodings incompatibles")
                    else:
                        st.error(f"‚ùå No se pudieron regenerar {failed} encodings")
        
        st.write("**üóëÔ∏è Limpiar Encodings Incompatibles**")
        st.info("Elimina encodings con formato incorrecto (solo como √∫ltimo recurso)")
        if st.button("üóëÔ∏è Limpiar Encodings", type="secondary"):
            with st.spinner("Limpiando encodings incompatibles..."):
                removed, total_invalid = clean_incompatible_encodings()
                if removed > 0:
                    st.success(f"‚úÖ Se eliminaron {removed} de {total_invalid} encodings incompatibles")
                    st.rerun()
                else:
                    st.info("‚ÑπÔ∏è No se encontraron encodings incompatibles para eliminar")
    
    with col_admin2:
        st.write("**Regenerar Encodings**")
        st.info("Regenera encodings para personas espec√≠ficas usando sus im√°genes")
        
        # Selector de persona para regenerar
        if not database.empty:
            person_options = [(row['id'], f"{row['nombre']} (ID: {row['id']})") for _, row in database.iterrows()]
            selected_person = st.selectbox(
                "Seleccionar persona:",
                options=[None] + person_options,
                format_func=lambda x: "Selecciona una persona..." if x is None else x[1]
            )
            
            if selected_person and st.button("üîÑ Regenerar Encoding", type="secondary"):
                person_id = selected_person[0]
                with st.spinner(f"Regenerando encoding para {selected_person[1]}..."):
                    success, message = regenerate_person_encoding(person_id)
                    if success:
                        st.success(f"‚úÖ {message}")
                        st.rerun()
                    else:
                        st.error(f"‚ùå {message}")
        else:
            st.info("No hay personas registradas")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p>üéØ OmniFace v2.0 - Sistema de Reconocimiento Facial</p>
        <p>Desarrollado con ‚ù§Ô∏è usando Streamlit + Supabase</p>
        <p>üåê <a href="https://github.com/bennminn/Omniface" target="_blank">Ver c√≥digo en GitHub</a></p>
    </div>
    """,
    unsafe_allow_html=True
)